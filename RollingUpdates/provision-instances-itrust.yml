---
- name: Create AWS instance
  hosts: localhost
  connection: local
  gather_facts: False
  remote_user: ubuntu
 
  vars:
    region: us-west-2
    instance_type: t2.micro
    ami: ami-6e1a0117
    project_name: amise56
    env: amise56
  tasks:
    - name: Create security group
      ec2_group:
        name: "{{ project_name }}_security_group"
        description: "{{ project_name }} security group"
        region: "{{ region }}"
        rules:
          - proto: all  # https
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: test_firewall

    - name: Create an EC2 key
      ec2_key:
        name: "{{ project_name }}-{{ env }}-key"
        region: "{{ region }}"
      register: ec2_key

    - name: Save private key
      copy: content="{{ ec2_key.key.private_key }}" dest="/var/lib/jenkins/awskey.pem" mode=0600
      when: ec2_key.changed

    - name: Create an EC2 instance
      ec2:
        key_name: "{{ project_name }}-{{ env }}-key"
        region: "{{ region }}"
        group_id: "{{ test_firewall.group_id }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami }}"
        wait: yes
        count: 6
        vpc_subnet_id: subnet-c7d1738e
        assign_public_ip: yes
      register: ec2

    - name: Delete pre-existing inventory file if it exists
      file:
        path: /var/lib/jenkins/inventory
        state: absent
      ignore_errors: yes

    - name: Create inventory file
      file:
        path: /var/lib/jenkins/inventory
        mode: 0644
        state: touch

    - name: Add line in file
      lineinfile:
        path: /var/lib/jenkins/inventory
        insertafter: EOF
        line: '[loadbalancer]'

    - name: Add instance to inventory file
      lineinfile: path=/var/lib/jenkins/inventory insertafter=EOF line="{{ ec2.instances[0].public_ip }} ansible_ssh_user=ubuntu ansible_ssh_private_key_file=/var/lib/jenkins/awskey.pem private_ip={{ ec2.instances[0].private_ip }}" state=present

    - name: Add line in file
      lineinfile:
        path: /var/lib/jenkins/inventory
        insertafter: EOF
        line: '[servers]'

    - name: Add Host1
      lineinfile: path=/var/lib/jenkins/inventory insertafter=EOF line="server1 ansible_ssh_host={{ ec2.instances[1].public_ip }} ansible_ssh_user=ubuntu ansible_ssh_private_key_file=/var/lib/jenkins/awskey.pem private_ip={{ ec2.instances[1].private_ip }}" state=present

    - name: Add Host2
      lineinfile:  path=/var/lib/jenkins/inventory insertafter=EOF line="server2 ansible_ssh_host={{ ec2.instances[2].public_ip }} ansible_ssh_user=ubuntu ansible_ssh_private_key_file=/var/lib/jenkins/awskey.pem private_ip={{ ec2.instances[2].private_ip }}" state=present

    - name: Add Host3
      lineinfile: path=/var/lib/jenkins/inventory insertafter=EOF line="server3 ansible_ssh_host={{ ec2.instances[3].public_ip }} ansible_ssh_user=ubuntu ansible_ssh_private_key_file=/var/lib/jenkins/awskey.pem private_ip={{ ec2.instances[3].private_ip }}" state=present

    - name: Add Host4
      lineinfile:  path=/var/lib/jenkins/inventory insertafter=EOF line="server4 ansible_ssh_host={{ ec2.instances[4].public_ip }} ansible_ssh_user=ubuntu ansible_ssh_private_key_file=/var/lib/jenkins/awskey.pem private_ip={{ ec2.instances[4].private_ip }}" state=present
       
    - name: Add Host5
      lineinfile:  path=/var/lib/jenkins/inventory insertafter=EOF line="server5 ansible_ssh_host={{ ec2.instances[5].public_ip }} ansible_ssh_user=ubuntu ansible_ssh_private_key_file=/var/lib/jenkins/awskey.pem private_ip={{ ec2.instances[5].private_ip }}" state=present
     
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 320
        state: started
      with_items: "{{ ec2.instances }}"  





