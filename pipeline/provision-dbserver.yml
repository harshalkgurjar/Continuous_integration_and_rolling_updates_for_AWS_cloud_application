---
- name: Create AWS instance
  hosts: localhost
  connection: local
  gather_facts: False
  remote_user: ubuntu
 
  vars:
    region: us-west-2
    instance_type: t2.micro
    ami: ami-6e1a0117
    project_name: payal48
    env: payal48
  tasks:
    - name: Create security group
      ec2_group:
        name: "{{ project_name }}_security_group"
        description: "{{ project_name }} security group"
        region: "{{ region }}"
        rules:
          - proto: all  # https
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: test_firewall

    - name: Create an EC2 key
      ec2_key:
        name: "{{ project_name }}-{{ env }}-key"
        region: "{{ region }}"
      register: ec2_key

    - name: Save private key
      copy: content="{{ ec2_key.key.private_key }}" dest="/home/ubuntu/awskey.pem" mode=0600
      when: ec2_key.changed

    - name: Create an EC2 instance
      ec2:
        key_name: "{{ project_name }}-{{ env }}-key"
        region: "{{ region }}"
        group_id: "{{ test_firewall.group_id }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami }}"
        wait: yes
        count: 1
        vpc_subnet_id: subnet-c7d1738e
        assign_public_ip: yes
      register: ec2

    - name: Delete pre-existing mongoip file if it exists
      file:
        path: /home/ubuntu/mongoip
        state: absent
      ignore_errors: yes

    - name: Create inventory file
      file:
        path: /home/ubuntu/mongoip
        mode: 0644
        state: touch

    - name: Add line in file
      lineinfile:
        path: /home/ubuntu/mongoip
        insertafter: EOF
        line: "{{ ec2.instances[0].private_ip }}"

    - name: Add all instance public IPs to host group
      add_host: hostname={{ item.public_ip }} groupname=mongodb ansible_ssh_user=ubuntu ansible_ssh_private_key_file="/home/ubuntu/awskey.pem"
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 320
        state: started
      with_items: "{{ ec2.instances }}"  

- hosts: mongodb
  name: configuration play
  user: ubuntu
  gather_facts: false

  tasks:
  
    - name: install python 2
      raw: test -e /usr/bin/python || (sudo apt -y update && sudo apt install -y python-minimal)
      
    - name: gather_facts
      setup:

- hosts: mongodb
  remote_user: ubuntu
  gather_facts: yes
  become: yes
  become_method: sudo
  
  vars:
     mongo_user : "{{ lookup('env','MONGO_USER')}}"
     mongo_password : "{{ lookup('env','MONGO_PASSWORD')}}" 
     
  tasks:
    - name: Installing Utilities
      apt: pkg={{ item }} state=present 
      with_items:
       - python-setuptools
       - python-pip
   
    - name: Add Mongo packages repo
      apt_key: id=EA312927  keyserver=keyserver.ubuntu.com
   
    - name: Add Mongo packages repo
      apt_key: id=EA312927  keyserver=keyserver.ubuntu.com
      
    - name: add repo itself
      apt_repository: repo='deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse' state=present
      
    - name: install mongodb
      apt: pkg=mongodb-org state=present force=yes #update_cache=yes

    - name: Install latest pymongo package
      pip: name=pymongo state=latest use_mirrors=no

    - name : Start mongodb
      service: 
       name: mongod
       state: started

    #wait for localhost
    #Configure mongo
    - name: Add MongoDB user
      mongodb_user:
        database: admin
        name: "{{ mongo_user }}"
        password: "{{ mongo_password }}"
        roles: readWrite,dbAdmin,userAdmin
        state: present

    - name: Enable secure authentication for MongoDB
      blockinfile:
        dest: "/etc/mongod.conf"
        content:
          "security:\n  authorization: disabled"

    - name: Change bind address for mongodb
      replace:
        path: /etc/mongod.conf
        regexp: "^  bindIp: 127.0.0.1$"
        replace: "  bindIp: 0.0.0.0"
        backup: yes

    - name: Restart mongodb
      service: name=mongod state=restarted
